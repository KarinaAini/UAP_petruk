#include <iostream>
#include <vector>
#include <queue>
#include <list>
#include <deque>
#include <stack>
#include <cstring>  // untuk strcmp, strcpy
#include <algorithm>
using namespace std;

struct MenuItem {
    char nama[30];
    int harga;
};

struct Pesanan {
    char namaPelanggan[50];
    vector<int> jumlah;
    int total;
};

vector<MenuItem> menu = {
    {"Nasi Goreng", 15000},
    {"Mie Ayam", 12000},
    {"Nasi kuning", 16000},
    {"Sate Ayam", 18000},
    {"Es Teh", 5000},
    {"Jus Jeruk", 8000},
    {"Jus Stroberi", 8500},
    {"Tempe goreng + Sambal terasi", 4500},
    {"Tahu goreng + Sambal matah", 6500},
    {"Air mineral", 3500},
};

queue<Pesanan> antrian;
deque<Pesanan> pesananPrioritas;
list<Pesanan> riwayatTransaksi;
stack<Pesanan> stackPembatalan;

int hitungTotalDivide(vector<int>& jumlah, int l, int r) {
    if (l == r) return jumlah[l] * menu[l].harga;
    int mid = (l + r) / 2;
    return hitungTotalDivide(jumlah, l, mid) + hitungTotalDivide(jumlah, mid + 1, r);
}

bool bandingkan(Pesanan a, Pesanan b) {
    return a.total > b.total;
}

int knapsack(int maxUang, vector<int>& nilai, vector<int>& berat, int n) {
    if (n == 0 || maxUang == 0) return 0;
    if (berat[n - 1] > maxUang)
        return knapsack(maxUang, nilai, berat, n - 1);
    return max(
        nilai[n - 1] + knapsack(maxUang - berat[n - 1], nilai, berat, n - 1),
        knapsack(maxUang, nilai, berat, n - 1)
    );
}

void tampilkanMenu() {
    cout << "\n=== MENU MAKANAN & MINUMAN ===\n";
    for (int i = 0; i < menu.size(); i++) {
        cout << i + 1 << ". " << menu[i].nama << " - Rp" << menu[i].harga << endl;
    }
}

void inputPesanan(bool prioritas = false) {
    Pesanan p;
    p.jumlah = vector<int>(menu.size(), 0);

    cout << "Nama pelanggan: ";
    cin.ignore();
    cin.getline(p.namaPelanggan, 50);

    int pilihan, jml;
    char lagi;
    do {
        cout << "Pilih menu (1-" << menu.size() << "): ";
        cin >> pilihan;
        cout << "Jumlah: ";
        cin >> jml;
        if (pilihan >= 1 && pilihan <= menu.size()) {
            p.jumlah[pilihan - 1] += jml;
        } else {
            cout << "Menu tidak valid!\n";
        }
        cout << "Tambah lagi? (y/n): ";
        cin >> lagi;
    } while (lagi == 'y' || lagi == 'Y');

    p.total = hitungTotalDivide(p.jumlah, 0, menu.size() - 1);

    if (prioritas) {
        pesananPrioritas.push_front(p);
    } else {
        antrian.push(p);
    }

    stackPembatalan.push(p);
    cout << "Pesanan berhasil ditambahkan.\n";
}

void batalkanPesananTerakhir() {
    if (!stackPembatalan.empty()) {
        Pesanan dibatalkan = stackPembatalan.top();
        stackPembatalan.pop();
        cout << "Pesanan atas nama " << dibatalkan.namaPelanggan << " telah dibatalkan.\n";
    } else {
        cout << "Tidak ada pesanan yang bisa dibatalkan.\n";
    }
}

void prosesAntrian() {
    vector<Pesanan> semua;

    while (!pesananPrioritas.empty()) {
        semua.push_back(pesananPrioritas.front());
        pesananPrioritas.pop_front();
    }

    while (!antrian.empty()) {
        semua.push_back(antrian.front());
        antrian.pop();
    }

    sort(semua.begin(), semua.end(), bandingkan);
    for (Pesanan& p : semua) {
        cout << "\n--- Struk untuk " << p.namaPelanggan << " ---\n";
        for (int i = 0; i < p.jumlah.size(); i++) {
            if (p.jumlah[i] > 0) {
                cout << menu[i].nama << " x" << p.jumlah[i]
                     << " = Rp" << menu[i].harga * p.jumlah[i] << endl;
            }
        }
        int bayar = p.total;
        if (p.total >= 100000) {
            int diskon = p.total / 10;
            bayar -= diskon;
            cout << "Diskon 10%: -Rp" << diskon << endl;
        }
        cout << "TOTAL BAYAR: Rp" << bayar << endl;
        riwayatTransaksi.push_back(p);
    }
}

vector<vector<int>> hasilRekomendasi;

void cari(int index, int total, vector<int>& kombinasi, const int anggaran) {
    if (total > anggaran) return;
    if (index == menu.size()) {
        if (total <= anggaran && total >= anggaran - 5000) {
            hasilRekomendasi.push_back(kombinasi);
        }
        return;
    }

    for (int jml = 0; jml <= 5; ++jml) {
        kombinasi[index] = jml;
        cari(index + 1, total + jml * menu[index].harga, kombinasi, anggaran);
    }
}
